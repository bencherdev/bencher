---
import { THEME_TOGGLE_ID, ThemeId } from "./theme";

// https://docs.astro.build/en/tutorial/6-islands/2/
---

<button id={THEME_TOGGLE_ID} class="button" title="Toggle dark mode">
  <span id={ThemeId.Light} class="icon has-text-primary">
    <i class="fas fa-sun" />
  </span>
  <span id={ThemeId.Dark} class="icon has-text-light">
    <i class="far fa-moon" />
  </span>
</button>

<script>
  import {BENCHER_WORDMARK_ID, BENCHER_WORDMARK_INLINE_ID, BENCHER_WORDMARK_FOOTER_ID, BENCHER_WORDMARK, BENCHER_WORDMARK_DARK} from "../../../util/ext.ts";
  import {THEME_KEY, Theme, THEME_TOGGLE_ID, ThemeId, getTheme} from "./theme";

  const wordmark = document.getElementById(BENCHER_WORDMARK_ID);
  const wordmarkInline = document.getElementById(BENCHER_WORDMARK_INLINE_ID);
  const wordmarkFooter = document.getElementById(BENCHER_WORDMARK_FOOTER_ID);
  const themeToggle = document.getElementById(THEME_TOGGLE_ID);
  const sunIcon = document.getElementById(ThemeId.Light);
  const moonIcon = document.getElementById(ThemeId.Dark);

  const setLightTheme = () => {
    wordmark ? wordmark.src = BENCHER_WORDMARK : null;
    wordmarkInline ? wordmarkInline.src = BENCHER_WORDMARK : null;
    wordmarkFooter ? wordmarkFooter.src = BENCHER_WORDMARK : null;
    themeToggle ? themeToggle.title = "Toggle dark mode" : null;
    sunIcon?.classList.remove("has-text-dark");
    sunIcon?.classList.add("has-text-primary");
    moonIcon?.classList.remove("has-text-primary");
    moonIcon?.classList.add("has-text-light");
  }
  const setDarkTheme = () => {
    wordmark ? wordmark.src = BENCHER_WORDMARK_DARK : null;
    wordmarkInline ? wordmarkInline.src = BENCHER_WORDMARK_DARK : null;
    wordmarkFooter ? wordmarkFooter.src = BENCHER_WORDMARK_DARK : null;
    themeToggle ? themeToggle.title = "Toggle light mode" : null;
    sunIcon?.classList.remove("has-text-primary");
    sunIcon?.classList.add("has-text-dark");
    moonIcon?.classList.remove("has-text-light");
    moonIcon?.classList.add("has-text-primary");
  }

  const setTheme = (theme: Theme) => {
    switch (theme) {
      case Theme.Light:
        setLightTheme();
        break;
      case Theme.Dark:
        setDarkTheme();
        break;
    }
    document.documentElement.setAttribute("data-theme", theme);
    window.localStorage.setItem(THEME_KEY, theme);
  }

  const initTheme = () => {
    // Only set the theme if the user has a preference for one.
    const theme = localStorage.getItem(THEME_KEY);
    if (theme) {
      setTheme(theme);
    }
  }

  const toggleTheme = () => {
    const theme = getTheme();
    switch (theme) {
      case Theme.Light:
        return setTheme(Theme.Dark);
      case Theme.Dark:
        return setTheme(Theme.Light);
    }
  }

  initTheme();
  themeToggle?.addEventListener("click", toggleTheme);
</script>
