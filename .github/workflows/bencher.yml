name: Bencher

on:
  workflow_dispatch:
  push:
    branches: [main, devel, express]
    tags: [v**]
  pull_request:
    branches: [main, devel]

env:
  # General
  CARGO_TERM_COLOR: always
  GITHUB_REGISTRY: ghcr.io
  FLY_REGISTRY: registry.fly.io
  MOLD_VERSION: 2.4.0
  # API
  API_BUILDER_DOCKER_IMAGE: bencher-api-builder
  API_LOCAL_DOCKER_IMAGE: bencher-api-local
  API_LITESTREAM_DOCKER_IMAGE: bencher-api-litestream
  LITESTREAM_VERSION: 0.3.13
  # CLI
  CLI_BIN_NAME: bencher
  ZIG_VERSION: 0.18.1
  # Use minimum supported glibc version for Rust Tier 1
  # https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-1-with-host-tools
  GLIBC_VERSION: 2.17
  # WASM
  WASM_BENCHER_VALID: bencher-valid-pkg
  # UI
  UI_BUILDER_DOCKER_IMAGE: bencher-ui-builder
  UI_DOCKER_IMAGE: bencher-ui
  UI_BUILD_DIST: bencher-ui-dist
  # Dev Container
  DEV_CONTAINER_DOCKER_IMAGE: bencher-dev-container
  # Cache
  CACHE_NAME: ${{ ((github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || startsWith(github.ref, 'refs/tags/')) && github.ref_name) || (github.ref == 'refs/heads/express' && 'main') || (github.event_name == 'pull_request' && github.event.number) }}

jobs:
  first_time_interaction:
    if: (!github.ref == 'refs/heads/express')
    name: Bencher First Time Interaction
    runs-on: ubuntu-latest
    steps:
      - uses: actions/first-interaction@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          issue-message: |-
            üê∞ Congratulations on your first issue! üéâ
            If you haven't already, hop on over to our [Discord server](https://discord.gg/yGEsdUh7R4).
            <br />
            <p align="center"><a href="https://discord.gg/yGEsdUh7R4"><img src="https://s3.amazonaws.com/public.bencher.dev/chat/discord_invite.png" alt="Bencher Discord Server" /></a></p>
          pr-message: |-
            üê∞ Congratulations on your first PR! üéâ
            If you haven't already, hop on over to our [Discord server](https://discord.gg/yGEsdUh7R4).
            <br />
            <p align="center"><a href="https://discord.gg/yGEsdUh7R4"><img src="https://s3.amazonaws.com/public.bencher.dev/chat/discord_invite.png" alt="Bencher Discord Server" /></a></p>

  # Bencher CLI GitHub Action
  build_github_action:
    name: Build GitHub Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Bencher CLI GitHub Action Dependencies
        working-directory: ./services/action
        run: npm install --include=dev
      - name: Build Bencher CLI GitHub Action
        working-directory: ./services/action
        run: npm run build
      - name: Check for changes
        continue-on-error: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: git diff --exit-code

  test_cli_install:
    name: Test CLI Install
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            source: main
          - os: ubuntu-latest
            source: devel
          - os: ubuntu-latest
            source: script
          # MacOS
          - os: macos-latest
            source: main
          - os: macos-latest
            source: devel
          - os: macos-latest
            source: script
          # Windows
          - os: windows-latest
            source: main
          - os: windows-latest
            source: devel
          - os: windows-latest
            source: script
    runs-on: ${{ matrix.os }}
    # This is expected to fail on `devel` when tagging a new release
    continue-on-error: ${{ startsWith(github.ref, 'refs/tags/') && matrix.source == 'devel' }}
    steps:
      - uses: bencherdev/bencher@main
        if: matrix.source == 'main'
      - uses: bencherdev/bencher@devel
        if: matrix.source == 'devel'
      - name: Unix CLI Install Script
        if: matrix.source == 'script' && matrix.os != 'windows-latest'
        run: curl --proto '=https' --tlsv1.2 -sSfL https://bencher.dev/download/install-cli.sh | sh
      - name: Windows CLI Install Script
        if: matrix.source == 'script' && matrix.os == 'windows-latest'
        run: irm https://bencher.dev/download/install-cli.ps1 | iex
      - name: Run current Bencher CLI GitHub Action
        run: bencher run --project bencher --token ${{ secrets.BENCHER_API_TOKEN }} --dry-run "bencher mock"

  # Pretty Rust
  cargo_fmt:
    name: Cargo Format
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    steps:
      - uses: actions/checkout@v4
      - name: Add fmt
        run: rustup component add rustfmt
      - name: Run fmt
        run: cargo fmt -- --check

  cargo_clippy:
    name: Cargo Clippy
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Add clippy
        run: rustup component add clippy
      - name: Run clippy
        run: cargo clippy --no-deps -- -Dwarnings

  check_generated:
    name: Check Generated
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Generate OpenAPI Spec
        run: cargo xtask swagger
      - name: Check OpenAPI Spec for changes
        run: git diff --exit-code
      - name: Generate Unix CLI install scripts
        run: cargo xtask template sh
      - name: Check Unix CLI install script for changes
        run: git diff --exit-code
      - name: Generate Windows CLI install scripts
        run: cargo xtask template ps1
      - name: Check Windows CLI install script for changes
        run: git diff --exit-code

  # Cargo Test
  cargo_test:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    name: Cargo Test
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    env:
      TEST_BILLING_KEY: ${{ secrets.TEST_BILLING_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: cargo test
        run: RUST_BACKTRACE=1 cargo test -- --nocapture
      - name: Upload Perf JPEG
        uses: actions/upload-artifact@v4
        with:
          name: perf.jpeg
          path: ./lib/bencher_plot/perf.jpeg
          if-no-files-found: error

  cargo_test_pr:
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
    name: Cargo Test PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: cargo test
        run: RUST_BACKTRACE=1 cargo test -- --nocapture
      - name: Upload Perf JPEG
        uses: actions/upload-artifact@v4
        with:
          name: perf.jpeg
          path: ./lib/bencher_plot/perf.jpeg
          if-no-files-found: error

  # API Smoke Test
  api_smoke_test:
    name: API Smoke Test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            smoke_test: localhost
          - os: ubuntu-latest
            smoke_test: docker
          # MacOS
          - os: macos-latest
            smoke_test: localhost
          # https://github.com/actions/runner-images/issues/17#issuecomment-614726536
          # - os: macos-latest
          #   smoke_test: docker
          # Windows
          - os: windows-latest
            smoke_test: localhost
          # https://github.com/orgs/community/discussions/25491#discussioncomment-3248089
          # - os: windows-latest
          #   smoke_test: docker
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') && matrix.smoke_test == 'docker' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Install `bencher` CLI
        run: cargo install --debug --path services/cli --locked --force
      - name: Run Smoke Test
        run: cargo xtask smoke-test ${{ matrix.smoke_test }}

  # Cargo Check (Minus)
  cargo_check_api_minus:
    name: Cargo Check API (Minus)
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-minus
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: cargo check
        working-directory: ./services/api
        run: cargo check --no-default-features

  cargo_check_cli_minus:
    name: Cargo Check CLI (Minus)
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-minus
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: cargo check
        working-directory: ./services/cli
        run: cargo check --no-default-features

  # Cargo Benchmark
  cargo_bench:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    name: Cargo Bench
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    # This will fail whenever Bencher Cloud is down
    # or there are any breaking changes to the report format
    continue-on-error: true
    env:
      BENCHER_PROJECT: bencher
      BENCHER_TESTBED: ubuntu-latest
      BENCHER_ADAPTER: rust
      BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Install `bencher` CLI
        run: cargo install --debug --path services/cli --locked --force
      - name: Dogfooding Benchmarks with Bencher
        run: |
          bencher run \
          --host https://api.bencher.dev \
          --if-branch "$GITHUB_REF_NAME" \
          --else-if-branch "$GITHUB_BASE_REF" \
          --err \
          --github-actions ${{ secrets.GITHUB_TOKEN }} \
          "cargo bench --package bencher_adapter"

  # Cargo Audit
  cargo_audit:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    name: Cargo Audit
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Cargo Unused Deps
  cargo_udeps:
    name: Cargo Unused Deps
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-nightly
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Install nightly toolchain
        run: rustup toolchain install nightly
      - name: Install udeps
        run: cargo install --version 0.1.42 --locked --force cargo-udeps
      - name: Run API udeps
        working-directory: ./services/api
        run: cargo +nightly udeps --all-targets
      - name: Run CLI udeps
        working-directory: ./services/cli
        run: cargo +nightly udeps --all-targets --features seed

  # Pretty JS
  npx_biome_format:
    name: Biome Format
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    steps:
      - uses: actions/checkout@v4
      - name: Biome format Action
        working-directory: ./services/action
        run: |
          npm install --include=dev
          npx biome ci --linter-enabled false --organize-imports-enabled false .
      - name: Biome format Console UI
        working-directory: ./services/console
        run: |
          npm install --include=dev
          npx biome ci --linter-enabled false --organize-imports-enabled false .

  npx_biome_lint:
    name: Biome Lint
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    # TODO fix all lints
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Biome check Action
        working-directory: ./services/action
        run: |
          npm install --include=dev
          npx biome ci --formatter-enabled false --organize-imports-enabled false .
      - name: Biome check Console UI
        working-directory: ./services/console
        run: |
          npm install --include=dev
          npx biome ci --formatter-enabled false --organize-imports-enabled false .

  # UI WASM
  build_bencher_valid_wasm:
    name: Build `bencher_valid` WASM
    runs-on: ubuntu-latest
    env:
      WASM_PACK_BUILD: "wasm-pack build --target web --no-default-features --features plus,wasm"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-wasm
      - uses: jetli/wasm-pack-action@v0.4.0
      - name: WASM pack `bencher_valid`
        working-directory: ./lib/bencher_valid
        run: |
          $WASM_PACK_BUILD || \
          $WASM_PACK_BUILD || \
          $WASM_PACK_BUILD || \
          $WASM_PACK_BUILD || \
          $WASM_PACK_BUILD
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WASM_BENCHER_VALID }}
          path: ./lib/bencher_valid/pkg
          if-no-files-found: error

  test_bencher_valid_wasm:
    name: Test `bencher_valid` WASM
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    needs: build_bencher_valid_wasm
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-wasm
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: cargo test `bencher_valid` WASM
        working-directory: ./lib/bencher_valid
        run: cargo test --no-default-features --features plus,wasm

  # NPM Test
  npx_vitest:
    name: vitest
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    needs: build_bencher_valid_wasm
    steps:
      - uses: actions/checkout@v4
      - name: Download `bencher_valid` Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WASM_BENCHER_VALID }}
          path: ./lib/bencher_valid/pkg
      - name: npx vitest
        working-directory: ./services/console
        run: |
          npm install --include=dev
          npx vitest run

  # API Docker
  # https://docs.docker.com/build/ci/github-actions/named-contexts/#using-with-a-container-builder
  # https://www.kenmuse.com/blog/implementing-docker-layer-caching-in-github-actions/
  build_local_api_docker:
    name: Build Local API
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Builder Stage
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/api/builder.Dockerfile
          tags: localhost:5000/${{ env.API_BUILDER_DOCKER_IMAGE }}
          build-args: |
            MOLD_VERSION=${{ env.MOLD_VERSION }}
          cache-from: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_BUILDER_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }}
          cache-to: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_BUILDER_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }},mode=max
          push: true
      - name: Tag Cached Builder
        run: docker image ls -a
      - name: Build Local API
        uses: docker/build-push-action@v5
        with:
          context: ./services/api
          file: ./services/api/local.Dockerfile
          tags: ${{ env.API_LOCAL_DOCKER_IMAGE }}
          cache-from: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_LOCAL_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }}
          cache-to: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_LOCAL_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }},mode=max
          build-contexts: |
            ${{ env.API_BUILDER_DOCKER_IMAGE }}=docker-image://localhost:5000/${{ env.API_BUILDER_DOCKER_IMAGE }}:latest
          load: true
          push: false
      - name: Save Local API
        run: |
          docker save ${{ env.API_LOCAL_DOCKER_IMAGE }} \
          | gzip > ${{ env.API_LOCAL_DOCKER_IMAGE }}.tar.gz
      - name: Upload Local API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_LOCAL_DOCKER_IMAGE }}.tar.gz
          path: ./${{ env.API_LOCAL_DOCKER_IMAGE }}.tar.gz
          if-no-files-found: error

  build_litestream_api_docker:
    name: Build Litestream API
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Builder Stage
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/api/builder.Dockerfile
          tags: localhost:5000/${{ env.API_BUILDER_DOCKER_IMAGE }}
          build-args: |
            MOLD_VERSION=${{ env.MOLD_VERSION }}
          cache-from: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_BUILDER_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }}
          cache-to: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_BUILDER_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }},mode=max
          push: true
      - name: Build Litestream API
        uses: docker/build-push-action@v5
        with:
          context: ./services/api
          file: ./services/api/litestream.Dockerfile
          tags: ${{ env.API_LITESTREAM_DOCKER_IMAGE }}
          build-args: |
            LITESTREAM_VERSION=${{ env.LITESTREAM_VERSION }}
          cache-from: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_LITESTREAM_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }}
          cache-to: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_LITESTREAM_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }},mode=max
          build-contexts: |
            ${{ env.API_BUILDER_DOCKER_IMAGE }}=docker-image://localhost:5000/${{ env.API_BUILDER_DOCKER_IMAGE }}:latest
          load: true
          push: false
      - name: Save Litestream API
        run: |
          docker save ${{ env.API_LITESTREAM_DOCKER_IMAGE }} \
          | gzip > ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
      - name: Upload Litestream API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
          path: ./${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
          if-no-files-found: error

  # CLI
  build_cli:
    name: Build CLI
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - build: linux-x86-64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: linux-arm-64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          # MacOS
          - build: macos-x86-64
            os: macos-latest
            target: x86_64-apple-darwin
          - build: macos-arm-64
            os: macos-latest
            target: aarch64-apple-darwin
          # Windows
          - build: windows-x86-64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - build: windows-arm-64
            os: windows-latest
            target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    steps:
      - uses: actions/checkout@v4
      # Install
      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}
      - uses: goto-bus-stop/setup-zig@v2
        if: (!startsWith(matrix.build, 'windows'))
      - name: Install zigbuild
        if: (!startsWith(matrix.build, 'windows'))
        run: cargo install --version ${{ env.ZIG_VERSION }} --locked --force cargo-zigbuild
      # Build
      - name: cargo zigbuild Linux CLI
        if: startsWith(matrix.build, 'linux')
        working-directory: ./services/cli
        run: cargo zigbuild --profile release-small --target ${{ matrix.target }}.${{ env.GLIBC_VERSION }}
      - name: cargo zigbuild macos CLI
        if: startsWith(matrix.build, 'macos')
        working-directory: ./services/cli
        run: cargo zigbuild --profile release-small --target ${{ matrix.target }}
      - name: cargo build Windows CLI
        if: startsWith(matrix.build, 'windows')
        working-directory: ./services/cli
        run: cargo build --profile release-small --target ${{ matrix.target }}
      # Rename
      - name: Rename Unix CLI bin
        if: (!startsWith(matrix.build, 'windows'))
        run: mv ./target/${{ matrix.target }}/release-small/${{ env.CLI_BIN_NAME }} ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}
      - name: Rename Windows CLI bin
        if: startsWith(matrix.build, 'windows')
        run: mv ./target/${{ matrix.target }}/release-small/${{ env.CLI_BIN_NAME }}.exe ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}.exe
      # Upload
      - name: Upload Unix CLI Artifact
        if: (!startsWith(matrix.build, 'windows'))
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}
          path: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}
          if-no-files-found: error
      - name: Upload Windows CLI Artifact
        if: startsWith(matrix.build, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}.exe
          path: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}.exe
          if-no-files-found: error

  package_cli:
    name: Package CLI
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - build: linux-x86-64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: amd64
          - build: linux-arm-64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: arm64
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    needs: build_cli
    env:
      CLI_DEB_DIR: deb
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/express' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - name: Download CLI Artifact
        if: (!startsWith(matrix.build, 'windows'))
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}
      - uses: rui314/setup-mold@v1
        if: startsWith(matrix.build, 'linux')
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      # Debian .deb
      - name: Build .deb package
        if: startsWith(matrix.build, 'linux')
        run: cargo xtask deb --dir ${{ env.CLI_DEB_DIR }} --arch ${{ matrix.arch }} ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}
      - name: Test install .deb package
        if: matrix.build == 'linux-x86-64'
        run: sudo dpkg -i ${{ env.CLI_DEB_DIR }}/${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}.deb
      - name: Sanity test .deb package installation
        if: matrix.build == 'linux-x86-64'
        run: |
          bencher --version
          bencher mock
          man bencher
      - name: Upload .deb Artifact
        if: startsWith(matrix.build, 'linux')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}.deb
          path: ${{ env.CLI_DEB_DIR }}/${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ matrix.build }}.deb
          if-no-files-found: error

  build_ui_docker:
    name: Build Console UI Docker
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (github.ref == 'refs/heads/express' && 1) || 60 }}
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Builder Stage
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/console/builder.Dockerfile
          tags: localhost:5000/${{ env.UI_BUILDER_DOCKER_IMAGE }}
          build-args: |
            MOLD_VERSION=${{ env.MOLD_VERSION }}
          cache-from: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.UI_BUILDER_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }}
          cache-to: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.UI_BUILDER_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }},mode=max
          push: true
      - name: Build Console UI
        uses: docker/build-push-action@v5
        with:
          context: ./services/console
          tags: ${{ env.UI_DOCKER_IMAGE }}
          cache-from: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.UI_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }}
          cache-to: type=registry,ref=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.UI_DOCKER_IMAGE }}:cache-${{ env.CACHE_NAME }},mode=max
          build-contexts: |
            ${{ env.UI_BUILDER_DOCKER_IMAGE }}=docker-image://localhost:5000/${{ env.UI_BUILDER_DOCKER_IMAGE }}:latest
          load: true
          push: false
      - name: Save Console UI
        run: |
          docker save ${{ env.UI_DOCKER_IMAGE }} \
          | gzip > ${{ env.UI_DOCKER_IMAGE }}.tar.gz
      - name: Upload Console UI Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UI_DOCKER_IMAGE }}.tar.gz
          path: ./${{ env.UI_DOCKER_IMAGE }}.tar.gz
          if-no-files-found: error

  build_ui:
    if: (!startsWith(github.ref, 'refs/tags/'))
    name: Build Console UI
    runs-on: ubuntu-latest
    needs: build_bencher_valid_wasm
    steps:
      - uses: actions/checkout@v4
      - name: Download `bencher_valid` Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WASM_BENCHER_VALID }}
          path: ./lib/bencher_valid/pkg
      - name: Build Console UI
        working-directory: ./services/console
        run: npm run netlify
      - name: Test Links
        uses: lycheeverse/lychee-action@v1.9.2
        with:
          args: --config ./services/console/lychee.toml ./services/console/dist
      - name: Failed Lychee
        continue-on-error: true
        if: env.lychee_exit_code != 0
        run: exit ${{ env.lychee_exit_code }}

  # API Fly.io
  deploy_local_api_fly:
    if: github.ref == 'refs/heads/devel'
    name: Deploy Local API to Fly.io
    runs-on: ubuntu-latest
    needs:
      - build_local_api_docker
      - build_ui
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Local Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_LOCAL_DOCKER_IMAGE }}.tar.gz
      - name: Load & Tag Local Image
        run: |
          docker load < ${{ env.API_LOCAL_DOCKER_IMAGE }}.tar.gz
          docker tag ${{ env.API_LOCAL_DOCKER_IMAGE }} ${{ env.FLY_REGISTRY }}/bencher-api-dev
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy Local API to Fly.io
        working-directory: ./services/api
        run: flyctl deploy --local-only --config fly/fly.dev.toml --wait-timeout 300
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Install `bencher` CLI
        run: cargo install --debug --path services/cli --locked --force
      - name: Run Smoke Test
        run: cargo xtask smoke-test dev

  test_litestream_api_fly:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/express' || github.ref == 'refs/heads/devel'
    name: Deploy Litestream API to Fly.io Test
    runs-on: ubuntu-latest
    needs: build_litestream_api_docker
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Litestream Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
      - name: Load & Tag Litestream Image
        run: |
          docker load < ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
          docker tag ${{ env.API_LITESTREAM_DOCKER_IMAGE }} ${{ env.FLY_REGISTRY }}/bencher-api-test
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy Litestream API to Fly.io Test
        working-directory: ./services/api
        run: flyctl deploy --local-only --config fly/fly.test.toml --wait-timeout 300
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Run Smoke Test
        run: cargo xtask smoke-test test

  backup_database:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/express'
    name: Backup Database
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.ref == 'refs/heads/express' }}
    needs:
      # Lint
      - cargo_fmt
      - cargo_clippy
      - npx_biome_format
      - npx_biome_lint
      - check_generated
      # Test
      - cargo_test
      - api_smoke_test
      - cargo_bench
      - cargo_audit
      - cargo_udeps
      - test_bencher_valid_wasm
      - npx_vitest
      # Build
      - build_litestream_api_docker
      - build_ui
      - build_cli
    env:
      BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN_ADMIN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Install `bencher` CLI
        run: cargo install --debug --path services/cli --locked --force
      - name: Backup API Server Database
        run: bencher server backup --host https://api.bencher.dev --compress --data-store aws_s3 --rm

  deploy_litestream_api_fly:
    name: Deploy Litestream API to Fly.io Prod
    runs-on: ubuntu-latest
    needs:
      - test_litestream_api_fly
      - backup_database
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Litestream Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
      - name: Load & Tag Litestream Image
        run: |
          docker load < ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
          docker tag ${{ env.API_LITESTREAM_DOCKER_IMAGE }} ${{ env.FLY_REGISTRY }}/bencher-api
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy Litestream API to Fly.io Prod
        working-directory: ./services/api
        run: flyctl deploy --local-only --config fly/fly.toml --wait-timeout 300
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Run Smoke Test
        run: cargo xtask smoke-test prod

  # UI Netlify
  deploy_ui_netlify_dev:
    name: Deploy Console UI to Netlify
    runs-on: ubuntu-latest
    needs: deploy_local_api_fly
    steps:
      - uses: actions/checkout@v4
      - name: Download `bencher_valid` Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WASM_BENCHER_VALID }}
          path: ./lib/bencher_valid/pkg
      - name: Build Console UI
        working-directory: ./services/console
        run: npm run netlify
      - uses: netlify/actions/cli@master
        id: netlify
        with:
          args: |
            deploy \
            --alias ${GITHUB_REF#refs/*/} \
            --message "${{ github.event.head_commit.message }}"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
      # https://docs.github.com/en/enterprise-cloud@latest/actions/learn-github-actions/expressions#tojson
      # https://github.com/netlify/actions/blob/375963b92b795c7b979927c580dd6f2a65ebcf28/cli/entrypoint.sh#L20
      - name: Run Netlify Dev Test
        run: |
          echo '${{ toJson(steps.netlify.outputs) }}' > ./netlify.json
          cargo xtask netlify-test --dev

  deploy_dev_notify:
    name: Notify of deployment
    runs-on: ubuntu-latest
    needs: deploy_ui_netlify_dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Notify of deployment
        run: cargo xtask notify "Deployed ${{ github.ref_name }}"

  deploy_ui_netlify_prod:
    name: Deploy UI to Netlify Prod
    runs-on: ubuntu-latest
    needs: deploy_litestream_api_fly
    steps:
      - uses: actions/checkout@v4
      - name: Download `bencher_valid` Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WASM_BENCHER_VALID }}
          path: ./lib/bencher_valid/pkg
      - name: Build Console UI
        working-directory: ./services/console
        run: npm run netlify
      - uses: netlify/actions/cli@master
        id: netlify
        with:
          args: |
            deploy \
            --alias ${GITHUB_REF#refs/*/} \
            --message "${{ github.event.head_commit.message }}" \
            --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
      # https://docs.github.com/en/enterprise-cloud@latest/actions/learn-github-actions/expressions#tojson
      # https://github.com/netlify/actions/blob/375963b92b795c7b979927c580dd6f2a65ebcf28/cli/entrypoint.sh#L20
      - name: Run Netlify Test
        run: |
          echo '${{ toJson(steps.netlify.outputs) }}' > ./netlify.json
          cargo xtask netlify-test

  deploy_prod_notify:
    name: Notify of deployment
    runs-on: ubuntu-latest
    needs: deploy_ui_netlify_prod
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Notify of deployment
        run: cargo xtask notify "Deployed ${{ github.ref_name }}"

  # Release
  release_bencher:
    if: startsWith(github.ref, 'refs/tags/')
    name: Release Bencher
    runs-on: ubuntu-latest
    needs:
      # Lint
      - cargo_fmt
      - cargo_clippy
      - npx_biome_format
      - npx_biome_lint
      - check_generated
      # Test
      - cargo_test
      - api_smoke_test
      - cargo_check_api_minus
      - cargo_check_cli_minus
      - cargo_bench
      - cargo_audit
      - cargo_udeps
      - test_bencher_valid_wasm
      - npx_vitest
      # Integrations
      - build_github_action
      # Build
      - build_local_api_docker
      - build_litestream_api_docker
      - build_ui_docker
      - package_cli
    env:
      BUILD_LINUX_X86_64: linux-x86-64
      BUILD_LINUX_ARM_64: linux-arm-64
      BUILD_MACOS_X86_64: macos-x86-64
      BUILD_MACOS_ARM_64: macos-arm-64
      BUILD_WINDOWS_X86_64: windows-x86-64
      BUILD_WINDOWS_ARM_64: windows-arm-64
    steps:
      - uses: actions/checkout@v4
      # Download Docker
      - name: Download Local API Docker Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_LOCAL_DOCKER_IMAGE }}.tar.gz
      - name: Download Litestream API Docker Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
      - name: Download UI Docker Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.UI_DOCKER_IMAGE }}.tar.gz
      # Download CLI
      - name: Download CLI Linux x86_64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_LINUX_X86_64 }}
      - name: Download CLI Linux ARM64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_LINUX_ARM_64 }}
      - name: Download CLI MacOS x86_64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_MACOS_X86_64 }}
      - name: Download CLI MacOS ARM64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_MACOS_ARM_64 }}
      - name: Download CLI Windows x86_64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_WINDOWS_X86_64 }}.exe
      - name: Download CLI Windows ARM64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_WINDOWS_ARM_64 }}.exe
      # Download CLI Packages
      - name: Download CLI Linux x86_64 .deb Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_LINUX_X86_64 }}.deb
      - name: Download CLI Linux ARM64 .deb Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_LINUX_ARM_64 }}.deb
      # Load
      - name: Load Local API Image
        run: docker load < ${{ env.API_LOCAL_DOCKER_IMAGE }}.tar.gz
      - name: Load Litestream API Image
        run: docker load < ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
      - name: Load UI Image
        run: docker load < ${{ env.UI_DOCKER_IMAGE }}.tar.gz
      # Login GHCR
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Tag & Push
      - name: Tag & Push Local API Image
        run: |
          export GITHUB_IMAGE=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_LOCAL_DOCKER_IMAGE }}
          docker tag ${{ env.API_LOCAL_DOCKER_IMAGE }} ${GITHUB_IMAGE}:latest
          docker tag ${{ env.API_LOCAL_DOCKER_IMAGE }} ${GITHUB_IMAGE}:${GITHUB_REF#refs/*/}
          docker push ${GITHUB_IMAGE}:latest
          docker push ${GITHUB_IMAGE}:${GITHUB_REF#refs/*/}
      - name: Tag & Push Litestream API Image
        run: |
          export GITHUB_IMAGE=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.API_LITESTREAM_DOCKER_IMAGE }}
          docker tag ${{ env.API_LITESTREAM_DOCKER_IMAGE }} ${GITHUB_IMAGE}:latest
          docker tag ${{ env.API_LITESTREAM_DOCKER_IMAGE }} ${GITHUB_IMAGE}:${GITHUB_REF#refs/*/}
          docker push ${GITHUB_IMAGE}:latest
          docker push ${GITHUB_IMAGE}:${GITHUB_REF#refs/*/}
      - name: Tag & Push UI Image
        run: |
          export GITHUB_IMAGE=${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.UI_DOCKER_IMAGE }}
          docker tag ${{ env.UI_DOCKER_IMAGE }} ${GITHUB_IMAGE}:latest
          docker tag ${{ env.UI_DOCKER_IMAGE }} ${GITHUB_IMAGE}:${GITHUB_REF#refs/*/}
          docker push ${GITHUB_IMAGE}:latest
          docker push ${GITHUB_IMAGE}:${GITHUB_REF#refs/*/}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-xtask
      - uses: rui314/setup-mold@v1
        with:
          mold-version: ${{ env.MOLD_VERSION }}
      - name: Generate Release Notes
        run: cargo xtask release-notes
      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ endsWith(github.ref, '-rc*') }}
          body_path: release-notes.md
          files: |
            ${{ env.API_LOCAL_DOCKER_IMAGE }}.tar.gz
            ${{ env.API_LITESTREAM_DOCKER_IMAGE }}.tar.gz
            ${{ env.UI_DOCKER_IMAGE }}.tar.gz
            ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_LINUX_X86_64 }}
            ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_LINUX_ARM_64 }}
            ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_MACOS_X86_64 }}
            ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_MACOS_ARM_64 }}
            ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_WINDOWS_X86_64 }}.exe
            ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_WINDOWS_ARM_64 }}.exe
            ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_LINUX_X86_64 }}.deb
            ${{ env.CLI_BIN_NAME }}-${{ github.ref_name }}-${{ env.BUILD_LINUX_ARM_64 }}.deb

  # Dev Container
  build_dev_container:
    if: github.ref == 'refs/heads/devel'
    name: Build dev container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pre-build dev container image
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.DEV_CONTAINER_DOCKER_IMAGE }}
          cacheFrom: ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.DEV_CONTAINER_DOCKER_IMAGE }}
          push: always
